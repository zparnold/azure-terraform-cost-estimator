/*
Copyright Â© 2020 NAME HERE <EMAIL ADDRESS>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/spf13/cobra"
	"github.com/zparnold/terraform-cost-estimator/common/pricers/azure"
	"github.com/zparnold/terraform-cost-estimator/common/types"
	"gopkg.in/yaml.v3"
	"io/ioutil"
	"os"
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "tf-estimate",
	Short: "Reads in a terraform plan and spits out a price",
	Long: `tf-estimate is a cli tool for reading terraform plans and spitting out price estimates.

It supports input as either a JSON blob or a standard terraform binary outfile.

Estimates can be outputted either in table format, JSON, or YAML using the the -o parameter. 
Possible values are: -o table, -o yaml, -o json

Examples:
./tf-estimate plan.out -o table #here plan.out is a file generated by terraform

`,
	RunE: func(cmd *cobra.Command, args []string) error {
		_ = os.Setenv("AWS_XRAY_SDK_DISABLED", "true")
		filePath := args[0]
		if _, err := os.Stat(filePath); os.IsNotExist(err) {
			return fmt.Errorf("%v, try the command again with a valid filepath", err)
		}
		planPriceResp, err := executePriceCommand(filePath)
		if err != nil {
			return err
		}
		switch outputFormat {
		case "yaml":
			o, _ := yaml.Marshal(planPriceResp)
			fmt.Println(string(o))
			break
		case "json":
			o, _ := json.Marshal(planPriceResp)
			fmt.Println(string(o))
			break
		default:
			output(planPriceResp)
			break
		}
		return nil
	},
	Args: cobra.ExactArgs(1),
}
var outputFormat string
var pricingScheme string

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {

	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	rootCmd.Flags().StringVarP(&outputFormat, "output", "o", "table", "-o yaml")
	rootCmd.Flags().StringVarP(&pricingScheme, "scheme", "s", "", "-s reserved1yr")
}

func executePriceCommand(filepath string) (types.ApiResp, error) {
	b, err := ioutil.ReadFile(filepath)
	if err != nil {
		return types.ApiResp{}, err
	}
	if pricingScheme == "" {
		pricingScheme = "consumption"
	}
	var r types.ApiResp
	hourlyPrice, unsupportedResources, unestimableResources, err := azure.PricePlanFile(context.Background(), string(b), azure.PricingSchemeLookup[pricingScheme])
	if err != nil {
		return types.ApiResp{}, err
	}
	r.UnsupportedResources = unsupportedResources
	r.UnestimateableResources = unestimableResources
	r.TotalEstimate.HourlyCost = hourlyPrice
	r.TotalEstimate.MonthlyCost = hourlyPrice * types.MONTH_HOURS
	r.TotalEstimate.YearlyCost = hourlyPrice * types.YEAR_HOURS
	return r, nil
}

func output(t types.ApiResp) {
	fmt.Printf("Hourly Estimate: $%0.2f\n", t.TotalEstimate.HourlyCost)
	fmt.Printf("Monthly Estimate: $%0.2f\n", t.TotalEstimate.MonthlyCost)
	fmt.Printf("Yearly Estimate: $%0.2f\n", t.TotalEstimate.YearlyCost)
	fmt.Println("Unsupported Resources:", t.UnsupportedResources)
	fmt.Println("Unestimateable Resources:", t.UnestimateableResources)
}
